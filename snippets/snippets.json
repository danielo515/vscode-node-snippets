{
/*
	 // Place your snippets for JavaScript (Babel) here. Each snippet is defined under a snippet name and has a prefix, body and
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	 "Simple map": {
		"prefix": ".map",
		"body": [
			".map(( $1 ) => {",
			"\t$1",
            "});"
		],
		"description": "array map with arrow function"
	},
	 "Object Keys map": {
		"prefix": "Okmap",
		"body": [
			"Object.keys($1).map(( $2 ) => {",
			"\t$2",
            "});"
		],
		"description": "Map object keys properties"
	},
	 "Require statement": {
		"prefix": "req",
		"body": [
			"const $1 = require('$2');"
		],
		"description": "basic require statement"
	},
	 "use strict statement": {
		"prefix": "use",
		"body": [
			"'use strict';"
		],
		"description": "use strict statement"
	},
	//Unit test basic file
    "Unit test headers": {
        "prefix": "testheaders",
        "body": [
            "'use strict';",
            "\n// Load modules",
            "const Code = require('code');",
            "const Lab = require('lab');",
            "\n// Test shortcuts",
            "const lab = exports.lab = Lab.script();",
            "const describe = lab.describe;",
            "const it = lab.it;",
            "const expect = Code.expect;"
        ]
    },
    //Unit test snippets stolen from VSCode.unitTestSnippets
    "Unit Test Describe with it": {
        "prefix": "descit",
        "body": [
            "describe ('$1', () => {",
            "\n\tit('$2', (done) => {",
            "\t\t$3",
            "\t});",
            "});"
        ],
        "description": "Describe with it"
    },
    "Unit Test Describe without it": {
        "prefix": "desc",
        "body": [
            "describe ('$1', (done) => {",
            "\n\t$2",
            "});"
        ],
        "description": "Describe without it"
    },
    "Unit Test it": {
        "prefix": "dit",
        "body": [
            "it ('$1', (done) => {",
            "\n\t$2",
            "});"
        ],
        "description": "Unit Test it"
    },
    "Expect toExist": {
        "prefix": "exte",
        "body": "expect(${object}).to.exist($1);$0",
        "description": "Expect to exist"
    },
    "Expect toNotExist": {
        "prefix": "exne",
        "body": "expect(${object}).to.not.exist($1);$0",
        "description": "Expect to not Exist"
    },
    "Expect toBe": {
        "prefix": "extb",
        "body": "expect(${object}).to.be.$1($2);$0",
        "description": "Expect to be"
    },
    "toNotBeNull": {
        "prefix": "exnb",
        "body": "expect(${object}).to.not.be.null();$0",
        "description": "Expect to not be null"
    },
    "toBeNull": {
        "prefix": "exnb",
        "body": "expect(${object}).to.be.null();$0",
        "description": "Expect to be null"
    },
    "Expect toEqual": {
        "prefix": "extq",
        "body": "expect(${object}).to.equal($1);$0",
        "description": "Expect to be equal"
    },
    "Expect toNotEqual": {
        "prefix": "exnq",
        "body": "expect(${object}).to.not.equal($1);$0",
        "description": "Expect toEqtoNotEqualual"
    },
    "Expect toThrow": {
        "prefix": "extt",
        "body": "expect(${object}).to.throw($1);$0",
        "description": "Expect to not throw"
    }
}